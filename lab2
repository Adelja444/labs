import numpy as np  # Импортируем библиотеку numpy для работы с матрицами и массивами
import json  # Импортируем библиотеку json для сохранения результатов в файл

def generate_matrix(n, m):
    """
    Функция для автоматической генерации прямоугольной матрицы размером n x m.
    n: количество строк
    m: количество столбцов
    """
    return np.random.randint(-10, 10, size=(n, m))  # Генерируем матрицу с элементами от -10 до 10

def find_max_in_col_with_max_sum(matrix):
    """
    Функция для нахождения наибольшего элемента столбца матрицы, для которого сумма абсолютных значений элементов максимальна.
    matrix: входная матрица
    """
    abs_sum = np.sum(np.abs(matrix), axis=0)  # Находим суммы абсолютных значений элементов каждого столбца
    max_sum_col_index = np.argmax(abs_sum)  # Находим индекс столбца с максимальной суммой абсолютных значений
    max_element = np.max(matrix[:, max_sum_col_index])  # Находим наибольший элемент в этом столбце
    return max_element.item(), max_sum_col_index.item()  # Преобразуем numpy типы в стандартные Python типы

def save_results(matrix, max_element, col_index, filename="results.json"):
    """
    Функция для сохранения исходных данных и результатов обработки в файл.
    matrix: исходная матрица
    max_element: наибольший элемент столбца с максимальной суммой абсолютных значений
    col_index: индекс столбца с максимальной суммой абсолютных значений
    filename: имя файла для сохранения результатов
    """
    data = {
        "matrix": matrix.tolist(),  # Преобразуем матрицу в список для сохранения в формате JSON
        "max_element": max_element,
        "max_sum_col_index": col_index
    }
    with open(filename, 'w') as file:  # Открываем файл для записи
        json.dump(data, file, indent=4)  # Сохраняем данные в файл в формате JSON

def main():
    """
    Основная функция программы.
    """
    n = 5  # Количество строк матрицы
    m = 4  # Количество столбцов матрицы
    matrix = generate_matrix(n, m)  # Генерируем матрицу
    print("Сгенерированная матрица:")
    print(matrix)  # Выводим сгенерированную матрицу

    max_element, col_index = find_max_in_col_with_max_sum(matrix)  # Находим наибольший элемент в столбце с максимальной суммой абсолютных значений
    print(f"Наибольший элемент в столбце {col_index} с максимальной суммой абсолютных значений: {max_element}")  # Выводим результаты

    save_results(matrix, max_element, col_index)  # Сохраняем результаты в файл
    print("Результаты сохранены в файл results.json")  # Сообщаем о сохранении результатов

if __name__ == "__main__":
    main()  # Запускаем основную функцию программы
