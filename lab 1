import random  # Импортируем модуль random для генерации случайных чисел

def input_list():
    """
    Функция для ввода списка элементов пользователем.
    """
    while True:  # Бесконечный цикл для обеспечения корректного ввода
        try:
            elements = input("Введите элементы списка через пробел: ")  # Запрашиваем у пользователя ввод списка элементов через пробел
            lst = [int(x) for x in elements.split()]  # Преобразуем строку в список целых чисел
            return lst  # Возвращаем полученный список
        except ValueError:  # Обрабатываем ошибку, если ввод некорректен (не целые числа)
            print("Некорректный ввод. Пожалуйста, введите целые числа.")  # Выводим сообщение об ошибке и повторяем ввод

def generate_list(size, lower_bound, upper_bound):
    """
    Функция для автоматической генерации списка.
    size: размер списка
    lower_bound: нижняя граница значений
    upper_bound: верхняя граница значений
    """
    return [random.randint(lower_bound, upper_bound) for _ in range(size)]  # Генерируем список случайных чисел в заданных пределах

def remove_longest_even_chain(lst):
    """
    Функция для удаления самой длинной цепочки четных элементов из списка.
    lst: исходный список
    """
    max_length = 0  # Переменная для хранения максимальной длины цепочки четных чисел
    max_start_index = -1  # Переменная для хранения начального индекса самой длинной цепочки
    current_length = 0  # Переменная для хранения текущей длины цепочки
    current_start_index = -1  # Переменная для хранения начального индекса текущей цепочки

    for i in range(len(lst)):  # Проходим по каждому элементу списка
        if lst[i] % 2 == 0:  # Проверяем, является ли элемент четным
            if current_length == 0:  # Если начинается новая цепочка, запоминаем её начальный индекс
                current_start_index = i
            current_length += 1  # Увеличиваем текущую длину цепочки
        else:
            if current_length > max_length:  # Если текущая цепочка длиннее максимальной найденной
                max_length = current_length  # Обновляем максимальную длину
                max_start_index = current_start_index  # Обновляем начальный индекс максимальной цепочки
            current_length = 0  # Сбрасываем текущую длину цепочки

    if current_length > max_length:  # Проверяем последний сегмент цепочки после завершения цикла
        max_length = current_length
        max_start_index = current_start_index

    if max_length > 0:  # Если найдена хотя бы одна цепочка четных чисел
        del lst[max_start_index:max_start_index + max_length]  # Удаляем самую длинную цепочку из списка
    return lst  # Возвращаем измененный список

def main():
    """
    Основная функция программы.
    """
    while True:  # Бесконечный цикл для корректного выбора способа ввода списка
        choice = input("Введите 1 для ручного ввода списка или 2 для автоматической генерации: ")  # Запрашиваем у пользователя выбор способа ввода
        if choice == '1':  # Если выбран ручной ввод
            lst = input_list()  # Вводим список вручную
            break  # Выходим из цикла
        elif choice == '2':  # Если выбрана автоматическая генерация
            size = int(input("Введите размер списка: "))  # Запрашиваем размер списка
            lower_bound = int(input("Введите нижнюю границу значений: "))  # Запрашиваем нижнюю границу значений
            upper_bound = int(input("Введите верхнюю границу значений: "))  # Запрашиваем верхнюю границу значений
            lst = generate_list(size, lower_bound, upper_bound)  # Генерируем список
            print(f"Сгенерированный список: {lst}")  # Выводим сгенерированный список
            break  # Выходим из цикла
        else:
            print("Некорректный ввод. Попробуйте снова.")  # Выводим сообщение об ошибке и повторяем ввод

    print(f"Исходный список: {lst}")  # Выводим исходный список
    lst = remove_longest_even_chain(lst)  # Удаляем самую длинную цепочку четных элементов
    print(f"Список после удаления самой длинной цепочки четных элементов: {lst}")  # Выводим измененный список

if __name__ == "__main__":  # Проверяем, что скрипт запущен напрямую, а не импортирован как модуль
    main()  # Вызываем основную функцию программы
